from lark import Lark, Transformer, Tree, v_args # type: ignore
from rich import print  # type: ignore # comente isso se quebrar, ou pip install rich

grammar = r"""
?start   : prog  # Ponto de entrada da gram√°tica

# Um programa pode ser:
# - Apenas uma compara√ß√£o
# - Ou um corpo com declara√ß√µes seguido de compara√ß√£o
?prog    : cmp
         | body ";" cmp

# Corpo (body) pode ser:
# - Uma √∫nica declara√ß√£o
# - Ou v√°rias declara√ß√µes separadas por ';'
?body    : decl
         | body ";" decl

# Declara√ß√£o de vari√°vel: x = express√£o
decl     : DEF "=" cmp

# Compara√ß√µes entre express√µes
?cmp     : expr ">" expr   -> gt
         | expr "<" expr   -> lt
         | expr ">=" expr  -> ge
         | expr "<=" expr  -> le
         | expr "=" expr   -> eq
         | expr "=/=" expr -> ne
         | expr            # fallback sem compara√ß√£o

# Express√µes com soma e subtra√ß√£o
?expr    : expr "+" term   -> add
         | expr "-" term   -> sub
         | term

# Termos com multiplica√ß√£o e divis√£o (suporta √ó e √∑ tamb√©m)
?term    : term ("*"|"√ó") pow   -> mul
         | term ("/"|"√∑") pow   -> div 
         | pow

# Potencia√ß√£o com ^ ou emoji ü´†
?pow     : atom ("^" | "ü´†") pow
         | atom

# √Åtomos s√£o n√∫meros, vari√°veis ou express√µes entre par√™nteses
?atom    : NUMBER 
         | VAR
         | "(" cmp ")"

# Tokens para vari√°veis e n√∫meros
VAR      : "x" | "y" | "z"
DEF      : "x" | "y" | "z"
NUMBER   : DIGIT+
DIGIT    : "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"

# Ignora espa√ßos e quebras de linha
%ignore " " | "\n"
"""


# Transformer respons√°vel por interpretar e avaliar a √°rvore sint√°tica
@v_args(inline=True)  # Faz com que os m√©todos recebam argumentos diretamente
class CalcTransformer(Transformer):  
    # Importa operadores matem√°ticos e l√≥gicos
    from operator import pow, add, sub, mul, truediv as div
    from operator import eq, ne, lt, le, gt, ge

    def __init__(self, visit_tokens = True):
        super().__init__(visit_tokens)
        self.env = {}  # Ambiente de vari√°veis (como uma mem√≥ria simples)
    
    def decl(self, name, value):
        # Define uma vari√°vel no ambiente
        self.env[name] = value

    def body(self, decl1, decl2):
        # Este m√©todo existe por estrutura, mas o corpo n√£o precisa retornar nada
        ...

    def prog(self, body, cmp):
        # Em um programa com declara√ß√µes e uma express√£o final, retorna o valor da compara√ß√£o
        return cmp

    def NUMBER(self, token):
        # Converte tokens de n√∫mero para inteiro
        return int(token)

    def DEF(self, token):
        # Retorna o nome da vari√°vel (para uso em declara√ß√µes)
        return str(token)

    def VAR(self, token):
        # Acessa o valor de uma vari√°vel previamente declarada
        name = str(token)
        return self.env[name]

    
transformer = CalcTransformer()
parser = Lark(grammar)

def pprint(obj):
    if hasattr(obj, "pretty"):
        print(obj.pretty())
    else:
        print(obj)

if __name__ == "__main__":
    src = "x = 2; y = x + 1; x * y"  # C√≥digo de exemplo: define x e y, depois calcula x * y

    print("src:", src)  # Mostra o c√≥digo fonte de entrada
    tree = parser.parse(src)  # Gera √°rvore sint√°tica a partir do c√≥digo
    tree_ = transformer.transform(tree)  # Avalia e transforma a √°rvore sint√°tica

    print("-" * 10)
    pprint(tree_)  # Exibe o resultado da express√£o final (6 neste caso)
